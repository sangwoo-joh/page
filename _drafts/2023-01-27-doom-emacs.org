#+title: Doom Emacs
#+subtitle: Welcome
#+last_update: 2023-02-20 14:46:13
#+layout: post
#+tags: dev

 * 나의 이맥스 설정은 부팅(?)이 느리다. 이건 명백한 사실. 심할 때는 3분 가까이
   걸리기도 함. =use-package= 개수는 63개지만, 실제 =eln-cache= 에 컴파일된 패키지
   수는 400여개. 즉, 이맥스가 켜질 때 마다 400개가 넘는 패키지를 한번에 로딩하고
   있었던 것이다.
 * 다양한 이맥스 변종 (예: 스페이스맥스) 에 대해 알고는 있었음. 그 중 둠
   이맥스는 테마가 마음에 들어서 개인적으로 고쳐다 쓰고 있었음.
 * 대체 왜 이렇게 부팅이 느린지 검색하다가 [[https://github.com/doomemacs/doomemacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][요런 글]]을 보게 되었고 홀린듯이 둠
   이맥스에 도전.
 * 그 결과 지금은 마이그레이션에 대해서 아주 만족스러움.

** 내가 이해한 둠 이맥스
 둠 이맥스에 대한 나의 멘탈 모델은 크게 세 가지.
 1. 모던 패키지 매니저. 이맥스의 기본 패키지 로더를 최적화해서 부팅 속도를
    비약적으로 높여주고, 다양하고 편리한 매크로를 제공해서 패키지 별로 설정을
    아주 편리하게 해줌 (=use-package= 보다 더 편함!) [[https://github.com/doomemacs/doomemacs/blob/develop/docs/faq.org#why-such-a-complicated-package-management-system][둠 패키지 관리 시스템의 철학]]
 2. 메이저 패키지 큐레이터. 둠 이맥스의 철학 중 하나인 *Reproducibility* 를 위해서
    많이 쓰이는 패키지는 자체적으로 커밋을 고정시켜서 관리하고 있고, 이걸 /모듈/
    이라는 이름으로 관리하고 있다. 덕분에 나도 잘 모르던 메이저 패키지를
    엄청나게 많이 알게 되었고 덕분에 지금 내 이맥스는 엄청나게 진화했다.
 3. 최첨단 이맥스 프레임워크. 두 가지를 내포하고 있는데: *최첨단* 과 *프레임워크*
    이다. *최첨단* 이므로 아직까지 대응하는 버전, OS 이슈 등이 있어서 몇몇
    설정(특히 모듈)의 경우 자주 깨져서 이맥스가 먹통이 되는 사례가 발생한다
    (...) . 따라서 이맥스 뉴비에게 추천하기에는 조금 애매한 부분이 있다. 반면에
    *프레임워크* 인만큼, 기존의 =.emacs.d= 는 둠이 관리해주고 우리는 =.doom.d= 에서
    내가 쓸 패키지와 추가 설정만을 하면 되므로, 기존의 엄청나게 자유롭던
    =.emacs.d= 관리에서 벗어나 마음이 홀가분해진다. 따라서 이맥스 뉴비에게도
    추천하기 좋은 부분이 있다(?). 이런 모순적인 부분이 재밌다.

** 아쉬운 점
 다 좋은데 몇 가지 아쉬운 점이 있다.
 1. =eyebrowse= 의 대용품으로 =persp-mode= 를 내장하고 있는데 이게 품질이 좀
    떨어진다. 키 바인딩은 0번 작업 공간인데 UI 넘버링은 =#1= 로 되어 있다거나,
    반드시 작업 공간을 생성해야 넘어간다거나 하는 등 소소한 부분에서 =eyebrowse=
    보다 애매하게 불편하다. 그래서 =eyebrowse= 를 직접 써봤는데 아쉽게도 =.emacs.d=
    를 둠이 관리하다 보니 이전 작업 공간이 제대로 복구가 안된다. 둠이 관리하는
    경로를 가져와서 설정하면 잘 동작하겠지만 그렇게까지 할 정도로 기본 작업
    공간이 크게 불편하진 않아서 그냥저냥 쓰고 있다. 그리고 무엇보다 [[https://github.com/doomemacs/doomemacs/issues/5255#issuecomment-877835286][원작자의
    계획]]도 추후에는 =eyebrowse= 로 넘어가는 것이라고 하니 그냥 기다리는게 더
    나을지도.
 2. 아무래도 오픈소스 프로젝트이다 보니 개발 진행 사항이나 이슈 처리 속도가
    아쉬운 것은 어쩔 수 없다. 이 글을 쓰는 시점에서도 이미 이슈가 500개 넘게
    쌓여 있다. 3500개 가까이 소화한 게 신기할 정도이다. 컨트리뷰터가 많긴 한데
    사실상 원작자인 [[https://github.com/hlissner][Henrik Lissner]]가 거의 다 혼자 개발 중이다. 그래서 패키지마자
    메인테이너를 구한다는 짤막한 글이 있다 (...). 나도 언젠가 기여해보고 싶지만
    이게 원작자가 2014년부터 혼자서 깎아오던 방망이라서 거대한 흐름을
    파악하는데는 시간이 좀더 걸릴 것 같다. 게다가 엄청 급한 이슈가 아니면
    리뷰에도 시간이 꽤 걸리기 때문에.. 아직 열린 PR이 88개나 있다...

** 좋은 점
 사실 위의 두 가지 아쉬운 점 빼고는 모든 것이 만족스럽다. 왜 진작 둠 이맥스를
 안썼을까 하는 생각이 들 정도로 만족스럽다.

 일단 이맥스를 켜는 속도가 매우 만족스럽다. 순정 이맥스를 켜는 것과 다름없는
 속도다. "프로그램 켜는 속도가 대체 뭐가 중요해?" 라고 생각할 수도 있겠지만,
 개인적으로는 이맥스를 다양한 환경에서 사용하고 있어서 이맥스가 켜지는 속도는
 생산성에 큰 영향을 미친다. 특히 (회사 작업 환경 상) 윈도우에서 리눅스 머신에
 붙어서 작업할 일이 꽤 잦은데, 나는 =putty= 를 쓰기보다는 (쓰고싶지 않기도 하고)
 그냥 이맥스를 켜서 거기서 모든 걸 해결하는 편인데, 그때마다 이맥스 켜는데 한
 세월이 걸리는걸 기다리기 힘들었다. 지금은 그냥 켜면 곧바로 뜨고, 마지막 세션
 로딩하면 필요한 패키지만 로딩이 되고, 작업하고 싶은 파일을 열면 또 거기에 맞는
 패키지만 로딩이 되어서 엄청나게 쾌적해졌다.

 몰랐던 패키지들도 많이 알게되었다. =OCaml= 을 위한 패키지를 따로 관리하고 있어서
 마음 편히 그걸 가져다 쓸 수도 있다 (심지어 내 세팅이랑 거의 유사하다... 역시
 이맥스 유저들 생각은 다 비슷한가 보다).

 무엇보다 둠 이맥스의 코드를 보면서 이맥스 리습 (이하 리습) 코드를 잘 짜는
 방법을 배울 수 있었다. 항상 ~lexical-binding~ 을 한다거나, 네이밍으로
 네임스페이스를 관리한다거나.. 이런 것들을 읽으면서 참 좋았다. 그리고 둠이
 제공하는 =.doom.d= 의 구조를 통해서 에디터의 설정 파일을 어떻게 관리할지에
 대해서도 멘탈 모델을 좀더 단단하게 만들 수 있었다. =.doom.d= 는 기본적으로 둠
 모듈(패키지)를 구성하는 =init.el= 파일과 써드파티 패키지를 기술하는 =packages.el=
 파일, 그리고 그 외 모든 모듈에 대한 설정을 기술하는 =config.el= 파일로 구성된다.
 이때까지 나는 기능 단위로 리습 모듈을 작성했었는데, 예를 들어 =OCaml= 과 관련된
 모든 패키지/설정/단축키/함수를 =ocaml.el= 에 작성했었다. 그런데 이렇게하면 기능이
 추가될 때마다 계속 파일이 늘어나게 되고, 기능마다 공통적인 의존성이 생기면 공통
 기능을 위한 파일을 또 작성하게 되는 등의 부차적인 귀찮음이 있었다. 하지만 이제
 둠의 설정 방식을 따르게 되면서 이런 번거로움이 깔끔하게 해결되었다. 공식 모듈은
 =init.el= 에, 추가적인 모듈은 =packages.el= 에, 나머지는 모두 =config.el= 에. 기존에
 쓰던 패키지 대부분은 이미 공식 모듈의 부분집합이었고, 기능 단위로 작성했던
 커스텀 함수들을 모두 =config.el= 에 때려박고 보니 600 라인 정도의 설정이
 탄생하였다. 이중 200 라인 정도는 추후 기억의 단서가 되는 주석이라서 실제 함수는
 400 라인 정도이긴 하다. 아무튼 이렇게 정리하고 나니 이맥스에 대한 나의 멘탈
 모델도 좀더 단단하게 잘 정리된 것 같고 앞으로 좀더 코드를 만질 일이 있을 때
 부담없이 가벼운 마음으로 수정할 수 있을 것 같다

 솔직한 심정으로 예전에는 주변에 이맥스에 관심이 있거나 이맥스를 시작하려고 하는
 사람이 있다면 여러 가지 이유로 말렸는데, 지금은 =help-with-tutorial= 로 기본적인
 컨셉과 키 바인딩만 익힌 다음에 곧바로 둠 이맥스를 설치하게끔 하고 싶다.
